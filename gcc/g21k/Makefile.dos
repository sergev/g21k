# Makefile for use on MSDOG.  Installed as Makefile by configure.bat.
BISON=bison
BISONFLAGS=-v
LIBDEPS=
CPPFLAGS=
CPLUS_INPUT=

CONFIG_H=
RTL = rtl.o
RTLANAL=rtlanal.o

# Special flags for compiling enquire.
ENQUIRE_CFLAGS = -DNO_SC -DNO_MEM -DNO_STDDEF $(GCC_CFLAGS)
ENQUIRE_LDFLAGS = $(LDFLAGS)

ALL_CFLAGS = -O -D__MSDOS__ -D__GNUDOS__
INCLUDES=-Iconfig -I.
LDFLAGS=

# Always use -I$(srcdir)/config when compiling.
.c.o:
	$(CC) -c $(ALL_CFLAGS) $(INCLUDES) $<

# Language-specific object files for C.
C_OBJS = c-parse_tab.o c-decl.o c-typeck.o c-lang.o c-convert.o \
   c-aux-info.o c-common.o dbxout.o

# Language-specific object files for Objectionable C.
OBJC_OBJS = objc-parse.o objc-actions.o \
   c-decl.o c-typeck.o c-convert.o c-aux-info.o c-common.o dbxout.o

# Language-specific object files for C++.
CPLUS_OBJS = cp-tab.o cp-decl.o cp-decl2.o \
   cp-typeck.o cp-type2.o cp-tree.o cp-ptree.o \
   cp-cvt.o cp-search.o cp-lex.o cp-gc.o cp-call.o \
   cp-class.o cp-init.o cp-method.o cp-except.o \
   cp-expr.o cp-pt.o cp-edsel.o cp-xref.o c-common.o \
   cp-dbxout.o $(CPLUS_INPUT)

# Language-independent object files.
OBJS = toplev.o version.o tree.o print-tree.o stor-layout.o fold-const.o \
 function.o stmt.o expr.o calls.o expmed.o explow.o optabs.o varasm.o \
 rtl.o print-rtl.o rtlanal.o sdbout.o dwarfout.o emit-rtl.o insn-emit.o \
 integrate.o jump.o cse.o loop.o unroll.o flow.o stupid.o combine.o \
 regclass.o local-alloc.o global-alloc.o reload.o reload1.o caller-save.o \
 insn-peep.o reorg.o sched.o final.o recog.o reg-stack.o \
 insn-recog.o insn-extract.o insn-output.o \
 insn-attrtab.o aux-output.o

# GEN files are listed separately, so they can be built before doing parallel
#  makes for cc1 or cc1plus.  Otherwise sequent parallel make attempts to load
#  them before rtl.o is compiled.
GEN= genemit genoutput genrecog genextract genflags gencodes genconfig genpeep

RTL_H = rtl.h rtl.def machmode.h machmode.def
TREE_H = tree.h real.h tree.def machmode.h machmode.def
CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def


all : cccp cc1 cc1plus cc1obj


# Define the names for selecting languages in LANGUAGES.
c: cc1
c++: cc1plus
objc: cc1obj
class-c: cc1obj
objective-c: cc1obj

compilations: ${OBJS}

gcc: gcc.o version.o $(LIBDEPS)
	gcc $(ALL_CFLAGS) $(LDFLAGS) -o gcc gcc.o version.o
# Go via `gccnew' to avoid `file busy' if gcc is `gcc'.
#	mv -f gccnew gcc
# Dump a specs file to make -B./ read these specs over installed ones
#	gcc -dumpspecs > specs

cc1 : $(C_OBJS) $(OBJS) $(LIBDEPS)
	>cc1.rf $(ALL_CFLAGS) $(LDFLAGS) -o cc1 $(C_OBJS) $(OBJS) $(LIBS)
	gcc @cc1.rf

cc1plus : $(CPLUS_OBJS) $(OBJS) $(LIBDEPS)
	>cc1plus.rf $(ALL_CFLAGS) $(LDFLAGS) -o cc1plus $(CPLUS_OBJS) $(OBJS) $(LIBS)
	gcc @cc1plus.rf

cc1obj : $(OBJC_OBJS) $(OBJS) $(LIBDEPS)
	>cc1obj.rf $(ALL_CFLAGS) $(LDFLAGS) -o cc1obj $(OBJC_OBJS) $(OBJS) $(LIBS)
	gcc @cc1obj.rf

float.h : enquire
	-./enquire -f > float.h

# Used to compile enquire with standard cc, but have forgotten why.
# Let's try with GCC.
enquire: enquire.o gnulib
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(ENQUIRE_LDFLAGS) enquire.o -o $@
enquire.o: enquire.c cc1 cpp
	-cp enquire.c . > /dev/null 2>&1
	$(GCC_FOR_TARGET) $(GCC_CFLAGS) $(CPPFLAGS) $(ENQUIRE_CFLAGS) -I. \
	    -c enquire.c

# Compiling object files from source files.

# Note that dependencies on obstack.h are not written
# because that file is not part of GCC.
# Dependencies on gvarargs.h are not written
# because all that file does, when not compiling with GCC,
# is include the system varargs.h.

# C language specific files.

c-parse_tab.o : c-parse_tab.c $(TREE_H) c-parse.h c-tree.h input.h flags.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c c-parse_tab.c
c-parse_tab.c : c-parse.y
	$(BISON) $(BISONFLAGS) c-parse.y -o $@

c-decl.o : c-decl.c $(CONFIG_H) $(TREE_H) c-tree.h c-parse.h flags.h
c-typeck.o : c-typeck.c $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-lang.o : c-lang.c $(CONFIG_H) $(TREE_H)
c-aux-info.o : c-aux-info.c  $(CONFIG_H) $(TREE_H) c-tree.h flags.h
c-convert.o : c-convert.c $(CONFIG_H) $(TREE_H)

# C++ language specific files.

cp-tab.o : cp-tab.c $(CPLUS_TREE_H) flags.h
	gcc -c $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) \
  -DPARSE_OUTPUT=\"$(PWD)/cp-tab.output\" \
  cp-tab.c

cp-tab.c cp-tab.h : cp-parse.y
	@echo expect 29 shift/reduce conflicts and 14 reduce/reduce conflicts
	$(BISON) $(BISONFLAGS) -d -o cp-tab.c cp-parse.y

cp-lex.o : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) \
   cp-tab.h cp-input.c flags.h
cp-decl.o : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \
  cp-parse.h cp-decl.h stack.h
cp-decl2.o : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \
  cp-parse.h cp-decl.h
cp-type2.o : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-typeck.o : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-class.o : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h \
    cp-class.h flags.h
cp-call.o : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h cp-class.h \
    flags.h
cp-init.o : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-method.o : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-cvt.o : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-search.o : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h
cp-tree.o : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-ptree.o : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-gc.o : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-except.o : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-expr.o : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \
  expr.h insn-codes.h
cp-edsel.o : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h
cp-xref.o : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-pt.o : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-tab.h

# Objectionable C language specific files.

objc-parse.o : objc-parse.c $(TREE_H) c-parse.h \
   c-tree.h input.h flags.h objc-actions.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c objc-parse.c
objc-parse.c : objc-parse.y
	$(BISON) $(BISONFLAGS) objc-parse.y -o $@

objc-actions.o : objc-actions.c $(TREE_H) c-tree.h c-parse.h \
   flags.h objc-actions.h

# A file used by all variants of C.

c-common.o : c-common.c $(TREE_H) c-tree.h c-parse.h flags.h

# Language-independent files.

gcc.o: gcc.c gvarargs.h obstack.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) \
  -DDEFAULT_TARGET_MACHINE=\"dos\" \
  -DCPP_SPEC=\"-D__MSDOS__\040-D__GO32__\" \
  -c gcc.c

dumpvers: dumpvers.c

version.o: version.c
obstack.o: obstack.c

tree.o : tree.c $(CONFIG_H) $(TREE_H) gvarargs.h flags.h function.h
print-tree.o : print-tree.c $(CONFIG_H) $(TREE_H)
stor-layout.o : stor-layout.c $(CONFIG_H) $(TREE_H) function.h
fold-const.o : fold-const.c $(CONFIG_H) $(TREE_H) flags.h 
toplev.o : toplev.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h input.h insn-attr.h

rtl.o : rtl.c $(CONFIG_H) $(RTL_H)

rtlanal.o : rtlanal.c $(CONFIG_H) $(RTL_H)

varasm.o : varasm.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h \
   insn-codes.h expr.h hard-reg-set.h regs.h
function.o : function.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-codes.h expr.h regs.h hard-reg-set.h insn-config.h \
   recog.h output.h
stmt.o : stmt.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h function.h  \
   insn-flags.h insn-config.h insn-codes.h hard-reg-set.h expr.h loop.h recog.h
expr.o : expr.c $(CONFIG_H) $(RTL_H) $(TREE_H) gvarargs.h flags.h function.h  \
   insn-flags.h insn-codes.h expr.h insn-config.h recog.h output.h typeclass.h
calls.o : calls.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h expr.h insn-flags.h
expmed.o : expmed.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \
   insn-flags.h insn-config.h insn-codes.h expr.h recog.h
explow.o : explow.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h hard-reg-set.h \
   insn-config.h expr.h recog.h insn-flags.h insn-codes.h
optabs.o : optabs.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h  \
   insn-flags.h insn-config.h insn-codes.h expr.h recog.h
# symout.o : symout.c $(CONFIG_H) $(TREE_H) $(RTL_H) symseg.h gdbfiles.h
dbxout.o : dbxout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h
cp-dbxout.o : cp-dbxout.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h
sdbout.o : sdbout.c $(CONFIG_H) $(TREE_H) $(RTL_H) gsyms.h
dwarfout.o : dwarfout.c $(CONFIG_H) $(TREE_H) $(RTL_H) flags.h

emit-rtl.o : emit-rtl.c $(CONFIG_H) $(RTL_H) gvarargs.h function.h  \
   regs.h insn-config.h real.h expr.h

integrate.o : integrate.c $(CONFIG_H) $(RTL_H) $(TREE_H) flags.h integrate.h \
   insn-flags.h insn-config.h expr.h real.h function.h

jump.o : jump.c $(CONFIG_H) $(RTL_H) flags.h hard-reg-set.h regs.h \
   insn-config.h insn-flags.h expr.h real.h
stupid.o : stupid.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h

cse.o : cse.c $(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h flags.h real.h \
   insn-config.h recog.h
loop.o : loop.c $(CONFIG_H) $(RTL_H) flags.h loop.h \
   insn-config.h insn-flags.h regs.h hard-reg-set.h recog.h expr.h real.h
unroll.o : unroll.c $(CONFIG_H) $(RTL_H) insn-config.h integrate.h regs.h \
   flags.h expr.h loop.h
flow.o : flow.c $(CONFIG_H) $(RTL_H) flags.h insn-config.h \
   basic-block.h regs.h hard-reg-set.h output.h
combine.o : combine.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h  \
   insn-config.h insn-flags.h insn-codes.h insn-attr.h regs.h expr.h \
   basic-block.h recog.h real.h
regclass.o : regclass.c $(CONFIG_H) $(RTL_H) hard-reg-set.h flags.h \
   basic-block.h regs.h insn-config.h recog.h 
local-alloc.o : local-alloc.c $(CONFIG_H) $(RTL_H) flags.h basic-block.h \
   regs.h hard-reg-set.h insn-config.h recog.h output.h
global-alloc.o : global-alloc.c $(CONFIG_H) $(RTL_H) flags.h  \
   basic-block.h regs.h hard-reg-set.h insn-config.h output.h

reload.o : reload.c $(CONFIG_H) $(RTL_H) flags.h \
   reload.h recog.h hard-reg-set.h insn-config.h regs.h real.h
reload1.o : reload1.c $(CONFIG_H) $(RTL_H) flags.h  \
   reload.h regs.h hard-reg-set.h insn-config.h insn-flags.h basic-block.h \
   recog.h output.h
caller-save.o : caller-save.c $(CONFIG_H) $(RTL_H) flags.h \
   reload.h regs.h hard-reg-set.h insn-config.h basic-block.h recog.h
reorg.o : reorg.c $(CONFIG_H) $(RTL_H) conditions.h hard-reg-set.h \
   basic-block.h regs.h insn-config.h insn-attr.h insn-flags.h recog.h \
   flags.h output.h
sched.o : sched.c $(CONFIG_H) $(RTL_H) basic-block.h regs.h hard-reg-set.h \
   flags.h insn-config.h insn-attr.h
final.o : final.c $(CONFIG_H) $(RTL_H) gvarargs.h flags.h regs.h \
   recog.h conditions.h \
   insn-config.h insn-attr.h real.h output.h hard-reg-set.h
recog.o : recog.c $(CONFIG_H) $(RTL_H)  \
   regs.h recog.h hard-reg-set.h flags.h insn-config.h insn-attr.h \
   insn-flags.h insn-codes.h real.h
reg-stack.o : reg-stack.c $(CONFIG_H) $(RTL_H) $(TREE_H) \
   regs.h hard-reg-set.h flags.h
   
aux-output.o : aux-output.c $(CONFIG_H) \
   $(RTL_H) regs.h hard-reg-set.h real.h insn-config.h conditions.h \
   insn-flags.h output.h insn-attr.h

# Remake cpp and protoize.

# Making the preprocessor
cpp: cccp
	-rm -f cpp
	ln cccp cpp
cccp: cccp.o cexp.o version.o $(LIBDEPS)
	gcc $(ALL_CFLAGS) $(LDFLAGS) -o cccp cccp.o cexp.o version.o $(LIBS)
cexp.o: cexp.c
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c cexp.c
cexp.c: cexp.y
	$(BISON) -o cexp.c cexp.y
cccp.o: cccp.c pcp.h version.c
	>cccp.rf $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) \
	-DGPLUSPLUS_INCLUDE_DIR="/usr/include" \
	-DGCC_INCLUDE_DIR="/usr/include" \
	-c cccp.c
	gcc @cccp.rf

proto: config.status protoize unprotoize SYSCALLS.c.X protoize.1 unprotoize.1

protoize: protoize.o getopt.o getopt1.o $(MALLOC)
	gcc -B./ $(GCC_CFLAGS) $(LDFLAGS) protoize.o getopt.o getopt1.o \
	  $(MALLOC) -o $@
protoize.o:	protoize.c cc1 cpp getopt.h
	gcc -B./ -c $(GCC_CFLAGS) $(CPPFLAGS) $(INCLUDES) \
          -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
          -DGPLUSPLUS_INCLUDE_DIR=\"$(libsubdir)/g++-include\" \
          -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
	  protoize.c -I$(srcdir)

unprotoize: unprotoize.o getopt.o getopt1.o $(MALLOC)
	gcc -B./ $(GCC_CFLAGS) $(LDFLAGS) unprotoize.o getopt.o getopt1.o \
	  $(MALLOC) -o $@
unprotoize.o:	protoize.c cc1 cpp getopt.h
	gcc -B./ -c $(GCC_CFLAGS) $(CPPFLAGS) $(INCLUDES) \
          -DGCC_INCLUDE_DIR=\"$(libsubdir)/include\" \
          -DGPLUSPLUS_INCLUDE_DIR=\"$(libsubdir)/g++-include\" \
          -DCROSS_INCLUDE_DIR=\"$(libsubdir)/sys-include\" \
	  -DSTD_PROTO_DIR=\"$(libsubdir)\" \
	  -DUNPROTOIZE protoize.c -I$(srcdir) -o $@

getopt.o: getopt.c getopt.h cc1 cpp
	gcc -B./ -c $(GCC_CFLAGS) $(CPPFLAGS) $(INCLUDES) getopt.c
getopt1.o: getopt1.c getopt.h cc1 cpp
	gcc -B./ -c $(GCC_CFLAGS) $(CPPFLAGS) $(INCLUDES) getopt1.c

protoize.1:	proto-man ./cpp
	./cpp -traditional proto-man \
		| grep -v '^#' \
			| awk 'NF > 0 {print}' > protoize.1

unprotoize.1:	proto-man ./cpp
	./cpp -traditional -DUNPRO proto-man \
		| grep -v '^#' \
			| awk 'NF > 0 {print}' > unprotoize.1

SYSCALLS.c.X:	SYSCALLS.c gcc ./cc1 ./cpp
	gcc -B./ $(GCC_CFLAGS) $(CPPFLAGS) $(INCLUDES) -fgen-aux-info \
	  -S -o /dev/null SYSCALLS.c

test-protoize:
	-rm -f tmp-protoize.*
	cp protoize.c tmp-protoize.c
	chmod u+w tmp-protoize.c
	./unprotoize -N -c "-B./ -Wall -Wwrite-strings $(CFLAGS)" tmp-protoize.c
	./protoize -N -B ./ -c "-B./ -Wall -Wwrite-strings $(CFLAGS)" tmp-protoize.c
	@echo Expect exactly one one line difference for visit_each_hash_node.
	-diff protoize.c tmp-protoize.c
	-rm -f tmp-protoize.*

force:


# The following pair of rules has this effect:
# genconfig is run only if the md has changed since genconfig was last run;
# but the file insn-config.h is touched only when its contents actually change.

# Each of the other insn-* files is handled by a similar pair of rules.

# Each of the insn-*.[ch] rules has a semicolon at the end,
# for otherwise the system Make on SunOS 4.1 never tries
# to recompile insn-*.o.

insn-config.h: md genconfig
	go32 genconfig md > tmp-config.h
	update tmp-config.h insn-config.h

insn-flags.h: md genflags
	go32 genflags md > tmp-flags.h
	update tmp-flags.h insn-flags.h

insn-codes.h: md gencodes
	go32 gencodes md > tmp-codes.h
	update tmp-codes.h insn-codes.h

insn-emit.o : insn-emit.c $(CONFIG_H) $(RTL_H) expr.h real.h output.h \
  insn-config.h insn-flags.h insn-codes.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-emit.c

insn-emit.c: md genemit
	go32 genemit md > tmp-emit.c
	update tmp-emit.c insn-emit.c

insn-recog.o : insn-recog.c $(CONFIG_H) $(RTL_H) insn-config.h recog.h \
  real.h output.h flags.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-recog.c

insn-recog.c: md genrecog
	go32 genrecog md > tmp-recog.c
	update tmp-recog.c insn-recog.c

insn-extract.o : insn-extract.c $(CONFIG_H) $(RTL_H)
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-extract.c

insn-extract.c: md genextract
	go32 genextract md > tmp-extract.c
	update tmp-extract.c insn-extract.c

insn-peep.o : insn-peep.c $(CONFIG_H) $(RTL_H) regs.h output.h real.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-peep.c

insn-peep.c: md genpeep
	go32 genpeep md > tmp-peep.c
	update tmp-peep.c insn-peep.c

insn-attrtab.o : insn-attrtab.c $(CONFIG_H) $(RTL_H) regs.h real.h output.h \
     insn-attr.h insn-config.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-attrtab.c

insn-attr.h: md genattr
	go32 genattr md > tmp-attr.h
	update tmp-attr.h insn-attr.h

insn-attrtab.c: md genattrtab
	go32 genattrtab md > tmp-attrtab.c
	update tmp-attrtab.c insn-attrtab.c

insn-output.o : insn-output.c $(CONFIG_H) $(RTL_H) regs.h real.h conditions.h \
    hard-reg-set.h insn-config.h insn-flags.h insn-attr.h output.h recog.h \
    insn-codes.h
	gcc $(ALL_CFLAGS) $(CPPFLAGS) $(INCLUDES) -c insn-output.c

insn-output.c: md genoutput
	go32 genoutput md > tmp-output.c
	update tmp-output.c insn-output.c

# Compile the programs that generate insn-* from the machine description.
# They are compiled with $(CC), and associated libraries,
# since they need to run on this machine
# even if GCC is being compiled to run on some other machine.

# $(CONFIG_H) is omitted from the deps of the gen*.o
# because these programs don't really depend on anything 
# about the target machine.  They do depend on config.h itself,
# since that describes the host machine.

genconfig : genconfig.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genconfig \
	  genconfig.o $(RTL) $(LIBS)

genconfig.o : genconfig.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genconfig.c

genflags : genflags.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genflags \
	 genflags.o $(RTL) $(LIBS)

genflags.o : genflags.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genflags.c

gencodes : gencodes.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o gencodes \
	 gencodes.o $(RTL) $(LIBS)

gencodes.o : gencodes.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  gencodes.c

genemit : genemit.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genemit \
	 genemit.o $(RTL) $(LIBS)

genemit.o : genemit.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genemit.c

genrecog : genrecog.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genrecog \
	 genrecog.o $(RTL) $(LIBS)

genrecog.o : genrecog.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genrecog.c

genextract : genextract.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genextract \
	 genextract.o $(RTL) $(LIBS)

genextract.o : genextract.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genextract.c

genpeep : genpeep.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genpeep \
	 genpeep.o $(RTL) $(LIBS)

genpeep.o : genpeep.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genpeep.c

genattr : genattr.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genattr \
	 genattr.o $(RTL) $(LIBS)

genattr.o : genattr.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genattr.c

genattrtab : genattrtab.o $(RTL) $(RTLANAL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genattrtab \
	 genattrtab.o $(RTL) $(RTLANAL) $(LIBS)

genattrtab.o : genattrtab.c $(RTL_H) config.h insn-config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genattrtab.c

genoutput : genoutput.o $(RTL) $(LIBDEPS)
	gcc $(CFLAGS) $(LDFLAGS) -o genoutput \
	 genoutput.o $(RTL) $(LIBS)

genoutput.o : genoutput.c $(RTL_H) config.h
	gcc -c $(CFLAGS) $(CPPFLAGS) $(INCLUDES)  genoutput.c

